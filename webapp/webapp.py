import traceback
import uuid

import requests
import streamlit as st

# FastAPI backend URLs
FASTAPI_BASE_URL = "http://127.0.0.1:8000"
CHAT_ENDPOINT = f"{FASTAPI_BASE_URL}/chat"
TRIPS_ENDPOINT = f"{FASTAPI_BASE_URL}/trips"

st.set_page_config(layout="wide")
st.title("️✈️ Travel Concierge AI")
st.caption("Your personal AI assistant for planning amazing trips!")

# --- Session State Initialization ---
if "messages" not in st.session_state:
  st.session_state.messages = []
if "client_managed_session_id" not in st.session_state: # Renamed for clarity
  st.session_state.client_managed_session_id = str(uuid.uuid4())
  print(f"STREAMLIT DEBUG: New client_managed_session_id initialized: {st.session_state.client_managed_session_id}")
if "current_structured_itinerary" not in st.session_state: # To store latest from agent
  st.session_state.current_structured_itinerary = None
if "saved_trips_list" not in st.session_state: # Renamed
  st.session_state.saved_trips_list = []
if "view_selected_trip_details" not in st.session_state: # Renamed
  st.session_state.view_selected_trip_details = None
if "last_chat_had_itinerary" not in st.session_state:
  st.session_state.last_chat_had_itinerary = False

# --- UI Layout ---
col_chat, col_sidebar = st.columns([2, 1])

with col_chat:
  st.subheader("Chat with your Travel Concierge")
  # Display prior chat messages
  for msg_idx, message_data in enumerate(st.session_state.messages):
    with st.chat_message(message_data["role"]):
      st.markdown(message_data["content"])
      if message_data["role"] == "assistant" and "itinerary_display_data" in message_data and message_data["itinerary_display_data"]:
        with st.expander(f"View Structured Itinerary (Turn {msg_idx//2 + 1})", expanded=st.session_state.get(f"turn_{msg_idx}_expanded", False)):
          st.json(message_data["itinerary_display_data"])

  # Chat input
  if prompt := st.chat_input("What's your travel query?"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"): st.markdown(prompt)

    payload = {"query": prompt, "session_id": st.session_state.client_managed_session_id}
    print(f"STREAMLIT DEBUG: Payload to /chat: {payload}")

    try:
      with st.spinner("Thinking..."):
        response = requests.post(CHAT_ENDPOINT, json=payload)
        response.raise_for_status()
        agent_response_data = response.json()
        print(f"STREAMLIT DEBUG: /chat Parsed JSON: {agent_response_data}")

      display_text = agent_response_data.get("display_text", "Sorry, empty response.")
      structured_itinerary = agent_response_data.get("structured_itinerary")
      # Update client_managed_session_id with the one confirmed/used by backend for consistency
      st.session_state.client_managed_session_id = agent_response_data.get("session_id", st.session_state.client_managed_session_id)

      st.session_state.current_structured_itinerary = structured_itinerary # Store latest
      st.session_state.last_chat_had_itinerary = bool(structured_itinerary)

      message_for_history = {"role": "assistant", "content": display_text}
      if structured_itinerary:
        message_for_history["itinerary_display_data"] = structured_itinerary
        st.session_state[f"turn_{len(st.session_state.messages)}_expanded"] = True # Auto-expand if new itinerary

      st.session_state.messages.append(message_for_history)
      st.rerun() # Rerun to display new message and button

    except Exception as e:
      error_message = f"Error during chat: {e}"
      st.error(error_message)
      st.session_state.messages.append({"role": "assistant", "content": error_message})
      traceback.print_exc()


with col_sidebar:
  st.subheader("Trip Management")

  if st.session_state.last_chat_had_itinerary and st.session_state.current_structured_itinerary:
    st.info("An itinerary was generated by the agent in the last turn.")
    if st.button("Save Current Itinerary"):
      print("STREAMLIT ACTION: 'Save Current Itinerary' button clicked.")
      save_payload = {
          "client_session_id": st.session_state.client_managed_session_id,
          "itinerary_data": st.session_state.current_structured_itinerary
      }
      try:
        save_response = requests.post(TRIPS_ENDPOINT, json=save_payload)
        save_response.raise_for_status()
        saved_data = save_response.json()
        st.success(f"Itinerary saved! Trip ID: {saved_data.get('trip_id')}")
        st.session_state.current_structured_itinerary = None # Clear after saving
        st.session_state.last_chat_had_itinerary = False
        st.session_state.saved_trips_list = [] # Force refresh of trips list
        st.rerun()
      except Exception as e:
        st.error(f"Failed to save itinerary: {e}")
        traceback.print_exc()
  elif st.session_state.current_structured_itinerary:
    st.caption("Itinerary available from previous turn. Save if ready.")
    if st.button("Save Stored Itinerary"): # Redundant if last_chat_had_itinerary is managed well
      # ... (same save logic as above) ...
      pass


  st.markdown("---")
  st.subheader("My Saved Trips")
  if st.button("Refresh Saved Trips List"):
    st.session_state.saved_trips_list = []
    st.session_state.view_selected_trip_details = None
    st.rerun()

    # Fetch trips if list is empty (initial load or after refresh)
  if not st.session_state.saved_trips_list:
    try:
      params = {"client_session_id": st.session_state.client_managed_session_id, "status": "upcoming"}
      trips_response = requests.get(TRIPS_ENDPOINT, params=params)
      trips_response.raise_for_status()
      st.session_state.saved_trips_list = trips_response.json()
      print(f"STREAMLIT DEBUG: Loaded saved trips: {st.session_state.saved_trips_list}")
    except Exception as e:
      st.warning(f"Could not load saved trips: {e}")

  if st.session_state.saved_trips_list:
    for trip_summary in st.session_state.saved_trips_list:
      trip_name = trip_summary.get("trip_name", "Unnamed Trip")
      trip_id = trip_summary.get("trip_id")
      if st.button(f"View: {trip_name} (ID: {trip_id[:8]}...)", key=f"view_trip_{trip_id}"):
        st.session_state.view_selected_trip_details = None
        try:
          detail_response = requests.get(f"{TRIPS_ENDPOINT}/{trip_id}")
          detail_response.raise_for_status()
          st.session_state.view_selected_trip_details = detail_response.json()
        except Exception as e:
          st.error(f"Could not load details for trip {trip_id}: {e}")
        st.rerun()
  else:
    st.caption("No saved upcoming trips found.")

  if st.session_state.view_selected_trip_details:
    st.markdown("---")
    st.subheader(f"Details for Trip: {st.session_state.view_selected_trip_details.get('trip_name', '')}")
    st.json(st.session_state.view_selected_trip_details)